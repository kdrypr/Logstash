input {
  udp {
    type => "pfsense"
    port => 5455
  }
}


filter {
  if [type] == "pfsense" {
    grok {
      add_tag => [ "firewall" ]
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
    }
    mutate {
      gsub => ["datetime","  "," "]
    }
    date {
      match => [ "datetime", "MMM dd HH:mm:ss" ]
      timezone => "Europe/Istanbul"
    }
    mutate {
      replace => [ "message", "%{msg}" ]
    }
    mutate {
      remove_field => [ "msg", "datetime" ]
    }

}
if [prog] =~ /^dhcpd$/ {
if [message] =~ /^DHCPACK .*/ {
	grok {
		match => {
			"message" => [
				"%{WORD:DHCP_ACTION} on %{IP:DHCP_CLIENT_IP} to %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE}",
				"%{WORD:DHCP_ACTION} on %{IP:DHCP_CLIENT_IP} to %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE}"
			]
		}
	}

} else if [message] =~ /^DHCPREQUEST .*/ {
	grok {
		match => {
			"message" => [
				"%{WORD:DHCP_ACTION} for %{IP:DHCP_CLIENT_IP} from %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE}",
				"%{WORD:DHCP_ACTION} for %{IP:DHCP_CLIENT_IP} \(%{IP:FIREWALL_GW}\) from %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE}",
				"%{WORD:DHCP_ACTION} for %{IP:DHCP_CLIENT_IP} from %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE}",
				"%{WORD:DHCP_ACTION} for %{IP:DHCP_CLIENT_IP} \(%{IP:FIREWALL_GW}\) from %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE}",
				"%{WORD:DHCP_ACTION} for %{IP:DHCP_CLIENT_IP} from %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE}: %{GREEDYDATA:ERROR}",
				"%{WORD:DHCP_ACTION} for %{IP:DHCP_CLIENT_IP} from %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE}: %{GREEDYDATA:ERROR}",
				"%{WORD:DHCP_ACTION} for %{IP:DHCP_CLIENT_IP} \(%{IP:FIREWALL_GW}\) from %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE}: %{GREEDYDATA:ERROR}"
			]
		}
	}

} else if [message] =~ /^DHCPDISCOVER .*/ {
	grok {
		match => {
			"message" => [
				"%{WORD:DHCP_ACTION} from %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE}",
				"%{WORD:DHCP_ACTION} from %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE}"
			]
		}
	}	

} else if [message] =~ /^DHCPOFFER .*/ {
	grok {
		match => {
			"message" => [
				"%{WORD:DHCP_ACTION} on %{IP:DHCP_CLIENT_IP} to %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE}",
				"%{WORD:DHCP_ACTION} on %{IP:DHCP_CLIENT_IP} to %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE}"
			]
		}
	}

} else if [message] =~ /^DHCPRELEASE .*/ {
	grok {
		match => {
			"message" => [
				"%{WORD:DHCP_ACTION} of %{IP:DHCP_CLIENT_IP} from %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE} \(%{GREEDYDATA:RELEASE_MESSAGE}\)",
				"%{WORD:DHCP_ACTION} of %{IP:DHCP_CLIENT_IP} from %{MAC:DHCP_CLIENT_MAC} \(%{GREEDYDATA:CLIENT_HOSTNAME}\) via %{WORD:INTERFACE} \(%{GREEDYDATA:RELEASE_MESSAGE}\)"
			]
		}
	}

} else if [message] =~ /^DHCPINFORM .*/ {
	grok {
		match => [ "message", "%{WORD:DHCP_ACTION} from %{IP:DHCP_CLIENT_IP} via %{WORD:INTERFACE}: \(%{GREEDYDATA:DESCRIPTION}\) %{IP:SUBNET}" ]
	}

} else if [message] =~ /^DHCPNAK .*/ {
	grok {
		match => [ "message", "%{WORD:DHCP_ACTION} on %{IP:DHCP_CLIENT_IP} to %{MAC:DHCP_CLIENT_MAC} via %{WORD:INTERFACE}" ]
	}

} else if [message] =~/^reuse_lease.*/ {
	grok {
		match => [ "message", "%{WORD:DHCP_ACTION}: %{GREEDYDATA:INFO} %{IP:DHCP_CLIENT_IP}" ]
	}
} 
 mutate {
      remove_field => [ "msg", "datetime" ]
 }

}

}

output {
if [prog] =~ /^dhcpd$/ {
  elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "logstash-dhcp-%{+YYYY.MM.dd}"
  }
}
}
